pop_lj <- rnorm(simulations, mean = 3.6e5, sd = 2e4)  # citizens of LJ
fraction_coffee_drinkers <- rnorm(simulations, mean = 0.65, sd = 0.05)
cups_per_day <- rnorm(simulations, mean = 2.5, sd = 0.5)
cup_size_liters <- rnorm(simulations, mean = 0.18, sd = 0.02)  # Size of a cup in liters
daily_coffee_liters <- pop_lj * fraction_coffee_drinkers * cups_per_day * cup_size_liters
data <- data.frame(DailyCoffeeLiters = daily_coffee_liters)
p <- ggplot(data, aes(x = DailyCoffeeLiters)) +
geom_histogram(fill = "brown", color = "black", bins = 30, alpha = 0.7) +
geom_vline(xintercept = mean(daily_coffee_liters), color = "red", linetype = "dashed") +
theme_minimal() +
labs(title = "Fermi Estimate: Coffee Consumption in Ljubljana",
subtitle = "Using Monte Carlo Simulation",
x = "Liters of Coffee Consumed per Day",
y = "Frequency")
print(p)
return(summary(daily_coffee_liters))
}
else {
stop("Problem not recognized. Try 'piano_tuners_chicago' or 'coffee_consumption_ljubljana'.")
}
}
#################
# function usage
#################
fermi_calculator("piano_tuners_chicago")
fermi_calculator("coffee_consumption_ljubljana")
fermi_calculator("drunks_in_dublin")
library(ggplot2)
library(dplyr)
library(gganimate)
t_test_tantrum <- function(n_tests = 100, sample_size = 30, alpha = 0.05, animate = FALSE) {
set.seed(123)
results <- data.frame(
test_id = 1:n_tests,
p_value = numeric(n_tests),
significant = FALSE
)
for (i in 1:n_tests) {
group_a <- rnorm(sample_size)
group_b <- rnorm(sample_size)
test <- t.test(group_a, group_b)
results$p_value[i] <- test$p.value
results$significant[i] <- test$p.value < alpha
}
# 🎭 Tantrum Output
sig_count <- sum(results$significant)
if (sig_count > 0) {
message("😱 T-TEST TANTRUM! ", sig_count, " tests were significant at p < ", alpha, "!!!")
cat(sample(c("🚨", "💥", "🤯", "⚠️", "🙀"), sig_count, replace = TRUE), "\n")
} else {
message("😴 Nothing significant. False discovery avoided… this time.")
}
# 📊 Plot p-values
p <- ggplot(results, aes(x = test_id, y = p_value, color = significant)) +
geom_point(size = 3, alpha = 0.8) +
geom_hline(yintercept = alpha, linetype = "dashed", color = "red") +
scale_color_manual(values = c("FALSE" = "gray60", "TRUE" = "red")) +
labs(
title = "t_test_tantrum() – 100 Useless Comparisons",
subtitle = paste("Significant results:", sig_count, "out of", n_tests),
x = "Test Number",
y = "p-value",
color = "Significant?"
) +
theme_minimal(base_size = 14)
if (animate) {
p <- p + transition_reveal(test_id) +
ease_aes("bounce-in-out")
animate(p, fps = 12, width = 700, height = 500)
} else {
print(p)
}
# 🧠 Educational Add-On
cat("\n📘 NOTE:\n")
cat("Running", n_tests, "t-tests on random data will still yield ~", floor(alpha * n_tests),
"false positives by chance.\n")
cat("This is known as 'multiple comparison problem' or… p-hacking. 👀\n")
return(invisible(results))
}
# run f(x)
t_test_tantrum()
# run f(x)
t_test_tantrum()
# run f(x2)
t_test_tantrum(n_tests = 200, sample_size = 25, animate = TRUE)
getwd()
# run f(x2)
r <- t_test_tantrum(n_tests = 200, sample_size = 25, animate = TRUE)
View(r)
getwd()
library(ggplot2)
library(gganimate)
unit_converter_confuser <- function(values, unit_from = "kilograms", seed = 42, report_path = "confuser_report.md") {
set.seed(seed)
# Absurdity of useful and useless mappings
unit_map <- list(
"meters"     = list(to = "lightyears", factor = 1.057e-16),
"grams"      = list(to = "elephants", factor = 1 / 5000000),
"liters"     = list(to = "bathtubs", factor = 1 / 150),
"seconds"    = list(to = "centuries", factor = 1 / (60*60*24*365.25*100)),
"newtons"    = list(to = "bananas", factor = 1 / 1.2),
"calories"   = list(to = "joules", factor = 4.184),
"degreesC"   = list(to = "ice creams melted", factor = 1 / 3),
"meters"     = list(to = "smoots", factor = 1 / 1.7018),
"grams"      = list(to = "blue whales", factor = 1 / 150000000),
"liters"     = list(to = "coffee cups", factor = 1 / 0.24),
"seconds"    = list(to = "Netflix episodes", factor = 1 / 1500),
"newtons"    = list(to = "apples", factor = 1 / 1),
"calories"   = list(to = "gummy bears", factor = 1 / 9),
"degreesC"   = list(to = "angry chefs", factor = 1 / 45),
"tweets"     = list(to = "Elon Musks", factor = 1 / 30000),
"bananas"    = list(to = "Eiffel Towers", factor = 1 / 400000),
"bitcoins"   = list(to = "pizzas (2010)", factor = 1 / 10000),
"kilograms"  = list(to = "llamas", factor = 1 / 140),
"decibels"   = list(to = "baby screams", factor = 1 / 15),
"lumens"     = list(to = "fireflies", factor = 1 / 0.25),
"hours"      = list(to = "meetings endured", factor = 1),
"euros"      = list(to = "Swedish meatballs", factor = 1 / 1.5)
)
if (!(unit_from %in% names(unit_map))) stop("Unsupported unit_from")
map <- unit_map[[unit_from]]
unit_to <- map$to
factor <- map$factor
converted <- values * factor
df <- data.frame(
value = c(values, converted),
unit = rep(c(unit_from, unit_to), each = length(values)),
time = rep(1:length(values), times = 2)
)
test <- t.test(values, converted)
# add chaos :)
chaos_noise <- function(x) x * runif(1, 1 - chaos, 1 + chaos)
p <- ggplot(df, aes(x = unit, y = value, fill = unit)) +
geom_boxplot(alpha = 0.6) +
geom_jitter(width = 0.15, size = 2, alpha = 0.8) +
labs(
title = "Wacky unit_converter_confuser()",
subtitle = paste("Converting", unit_from, "→", unit_to),
x = "Unit Type", y = "Value"
) +
theme_minimal(base_size = 14) +
transition_states(time, transition_length = 2, state_length = 1) +
ease_aes("cubic-in-out")
anim <<- animate(p, nframes = 50, fps = 10, width = 700, height = 500)
# Markdown wacky parody Report Generation
report <- paste0(
"# 📄 Parody Scientific Report\n",
"## Project: **unit_converter_confuser()**\n\n",
"### Conversion: `", unit_from, "` ➡️ `", unit_to, "`\n\n",
"**Sample size**: ", length(values), "\n",
"**Conversion factor**: ", signif(factor, 4), "\n\n",
"### 🔬 T-Test Results:\n",
"- t-statistic: ", round(test$statistic, 3), "\n",
"- p-value: ", format.pval(test$p.value, digits = 3), "\n",
"- Conclusion: ", ifelse(test$p.value < 0.05, "🤯 Statistically significant nonsense!", "🤷 Not even the nonsense is significant."), "\n\n",
"### 📉 Plot included in animation.\n\n",
"_This report is proudly brought to you by the Society of Confused Analysts._"
)
writeLines(report, report_path)
message("Report saved to: ", report_path)
return(invisible(list(
original = data.frame(value = values, unit = unit_from),
converted = data.frame(value = converted, unit = unit_to),
t_test = test,
report_path = report_path
)))
}
set.seed(2908)
fake_weights <- rnorm(20, mean = 70, sd = 15)
unit_converter_confuser(fake_weights, unit_from = "decibels")
anim
library(ggplot2)
library(gganimate)
unit_converter_confuser <- function(values, unit_from = "kilograms", seed = 42, report_path = "confuser_report.md") {
set.seed(seed)
# Absurdity of useful and useless mappings
unit_map <- list(
"meters"     = list(to = "lightyears", factor = 1.057e-16),
"grams"      = list(to = "elephants", factor = 1 / 5000000),
"liters"     = list(to = "bathtubs", factor = 1 / 150),
"seconds"    = list(to = "centuries", factor = 1 / (60*60*24*365.25*100)),
"newtons"    = list(to = "bananas", factor = 1 / 1.2),
"calories"   = list(to = "joules", factor = 4.184),
"degreesC"   = list(to = "ice creams melted", factor = 1 / 3),
"meters"     = list(to = "smoots", factor = 1 / 1.7018),
"grams"      = list(to = "blue whales", factor = 1 / 150000000),
"liters"     = list(to = "coffee cups", factor = 1 / 0.24),
"seconds"    = list(to = "Netflix episodes", factor = 1 / 1500),
"newtons"    = list(to = "apples", factor = 1 / 1),
"calories"   = list(to = "gummy bears", factor = 1 / 9),
"degreesC"   = list(to = "angry chefs", factor = 1 / 45),
"tweets"     = list(to = "Elon Musks", factor = 1 / 30000),
"bananas"    = list(to = "Eiffel Towers", factor = 1 / 400000),
"bitcoins"   = list(to = "pizzas (2010)", factor = 1 / 10000),
"kilograms"  = list(to = "llamas", factor = 1 / 140),
"decibels"   = list(to = "baby screams", factor = 1 / 15),
"lumens"     = list(to = "fireflies", factor = 1 / 0.25),
"hours"      = list(to = "meetings endured", factor = 1),
"euros"      = list(to = "Swedish meatballs", factor = 1 / 1.5)
)
if (!(unit_from %in% names(unit_map))) stop("Unsupported unit_from")
map <- unit_map[[unit_from]]
unit_to <- map$to
factor <- map$factor
test <- t.test(values, converted)
# add chaos :)
chaos_noise <- function(x) x * runif(1, 1 - chaos, 1 + chaos)
base <- base_unit_map[[unit_from]]
factor <- chaos_noise(base$factor)
unit_to <- if (chaos > 0.5) sample(unlist(lapply(base_unit_map, `[[`, "to")), 1) else base$to
unit_from_scramble <- if (chaos > 0.5) paste(sample(strsplit(unit_from, "")[[1]]), collapse = "") else unit_from
if (chaos > 0.7) {
values <- values + rnorm(length(values), mean = 0, sd = sd(values) * chaos)
}
converted <- values * factor
df <- data.frame(
value = c(values, converted),
unit = rep(c(unit_from_scramble, unit_to), each = length(values)),
time = rep(1:length(values), times = 2)
)
p <- ggplot(df, aes(x = unit, y = value, fill = unit)) +
geom_boxplot(alpha = 0.6) +
geom_jitter(width = 0.15, size = 2, alpha = 0.8) +
labs(
title = "Wacky unit_converter_confuser()",
subtitle = paste("Converting", unit_from, "→", unit_to),
x = "Unit Type", y = "Value"
) +
theme_minimal(base_size = 14) +
transition_states(time, transition_length = 2, state_length = 1) +
ease_aes("cubic-in-out")
anim <<- animate(p, nframes = 50, fps = 10, width = 700, height = 500)
# Markdown wacky parody Report Generation
report <- paste0(
"# 📄 Parody Scientific Report\n",
"## Project: **unit_converter_confuser()**\n\n",
"### Conversion: `", unit_from, "` ➡️ `", unit_to, "`\n\n",
"**Sample size**: ", length(values), "\n",
"**Conversion factor**: ", signif(factor, 4), "\n\n",
"### 🔬 T-Test Results:\n",
"- t-statistic: ", round(test$statistic, 3), "\n",
"- p-value: ", format.pval(test$p.value, digits = 3), "\n",
"- Conclusion: ", ifelse(test$p.value < 0.05, "🤯 Statistically significant nonsense!", "🤷 Not even the nonsense is significant."), "\n\n",
"### 📉 Plot included in animation.\n\n",
"_This report is proudly brought to you by the Society of Confused Analysts._"
)
writeLines(report, report_path)
message("Report saved to: ", report_path)
return(invisible(list(
original = data.frame(value = values, unit = unit_from),
converted = data.frame(value = converted, unit = unit_to),
t_test = test,
report_path = report_path
)))
}
set.seed(2908)
fake_weights <- rnorm(20, mean = 70, sd = 15)
unit_converter_confuser(fake_weights, unit_from = "decibels")
library(ggplot2)
library(gganimate)
unit_converter_confuser <- function(values, unit_from = "kilograms", seed = 42, report_path = "confuser_report.md") {
set.seed(seed)
# Absurdity of useful and useless mappings
unit_map <- list(
"meters"     = list(to = "lightyears", factor = 1.057e-16),
"grams"      = list(to = "elephants", factor = 1 / 5000000),
"liters"     = list(to = "bathtubs", factor = 1 / 150),
"seconds"    = list(to = "centuries", factor = 1 / (60*60*24*365.25*100)),
"newtons"    = list(to = "bananas", factor = 1 / 1.2),
"calories"   = list(to = "joules", factor = 4.184),
"degreesC"   = list(to = "ice creams melted", factor = 1 / 3),
"meters"     = list(to = "smoots", factor = 1 / 1.7018),
"grams"      = list(to = "blue whales", factor = 1 / 150000000),
"liters"     = list(to = "coffee cups", factor = 1 / 0.24),
"seconds"    = list(to = "Netflix episodes", factor = 1 / 1500),
"newtons"    = list(to = "apples", factor = 1 / 1),
"calories"   = list(to = "gummy bears", factor = 1 / 9),
"degreesC"   = list(to = "angry chefs", factor = 1 / 45),
"tweets"     = list(to = "Elon Musks", factor = 1 / 30000),
"bananas"    = list(to = "Eiffel Towers", factor = 1 / 400000),
"bitcoins"   = list(to = "pizzas (2010)", factor = 1 / 10000),
"kilograms"  = list(to = "llamas", factor = 1 / 140),
"decibels"   = list(to = "baby screams", factor = 1 / 15),
"lumens"     = list(to = "fireflies", factor = 1 / 0.25),
"hours"      = list(to = "meetings endured", factor = 1),
"euros"      = list(to = "Swedish meatballs", factor = 1 / 1.5)
)
if (!(unit_from %in% names(base_unit_map))) stop("Unsupported unit_from")
chaos_noise <- function(x) x * runif(1, 1 - chaos, 1 + chaos)
base <- base_unit_map[[unit_from]]
factor <- chaos_noise(base$factor)
unit_to <- if (chaos > 0.5) sample(unlist(lapply(base_unit_map, `[[`, "to")), 1) else base$to
unit_from_scramble <- if (chaos > 0.5) paste(sample(strsplit(unit_from, "")[[1]]), collapse = "") else unit_from
if (chaos > 0.7) {
values <- values + rnorm(length(values), mean = 0, sd = sd(values) * chaos)
}
converted <- values * factor
df <- data.frame(
value = c(values, converted),
unit = rep(c(unit_from_scramble, unit_to), each = length(values)),
time = rep(1:length(values), times = 2)
)
test <- if (chaos == 1) list(statistic = rnorm(1, 0, 10), p.value = runif(1)) else t.test(values, converted)
p <- ggplot(df, aes(x = unit, y = value, fill = unit)) +
geom_boxplot(alpha = 0.6) +
geom_jitter(width = 0.15, size = 2, alpha = 0.8) +
labs(
title = "Wacky unit_converter_confuser()",
subtitle = paste("Converting", unit_from, "→", unit_to),
x = "Unit Type", y = "Value"
) +
theme_minimal(base_size = 14) +
transition_states(time, transition_length = 2, state_length = 1) +
ease_aes("cubic-in-out")
anim <<- animate(p, nframes = 50, fps = 10, width = 700, height = 500)
# Markdown wacky parody Report Generation
report <- paste0(
"# 📄 Parody Scientific Report\n",
"## Project: **unit_converter_confuser()**\n\n",
"### Conversion: `", unit_from, "` ➡️ `", unit_to, "`\n\n",
"**Sample size**: ", length(values), "\n",
"**Conversion factor**: ", signif(factor, 4), "\n\n",
"### 🔬 T-Test Results:\n",
"- t-statistic: ", round(test$statistic, 3), "\n",
"- p-value: ", format.pval(test$p.value, digits = 3), "\n",
"- Conclusion: ", ifelse(test$p.value < 0.05, "🤯 Statistically significant nonsense!", "🤷 Not even the nonsense is significant."), "\n\n",
"### 📉 Plot included in animation.\n\n",
"_This report is proudly brought to you by the Society of Confused Analysts._"
)
writeLines(report, report_path)
message("Report saved to: ", report_path)
return(invisible(list(
original = data.frame(value = values, unit = unit_from),
converted = data.frame(value = converted, unit = unit_to),
t_test = test,
report_path = report_path
)))
}
set.seed(2908)
fake_weights <- rnorm(20, mean = 70, sd = 15)
unit_converter_confuser(fake_weights, unit_from = "decibels")
set.seed(2908)
fake_weights <- rnorm(20, mean = 70, sd = 15)
unit_converter_confuser(fake_weights, unit_from = "kilograms", chaos = 0.92)
fake_weights <- rnorm(20, mean = 70, sd = 15)
unit_converter_confuser(fake_weights, unit_from = "kilograms", chaos = 0.92)
unit_converter_confuser <- function(values, unit_from = "kilograms", chaos = 0.3,
seed = 42, report_path = "confuser_report.md") {
set.seed(seed)
# Absurdity of useful and useless mappings
unit_map <- list(
"meters"     = list(to = "lightyears", factor = 1.057e-16),
"grams"      = list(to = "elephants", factor = 1 / 5000000),
"liters"     = list(to = "bathtubs", factor = 1 / 150),
"seconds"    = list(to = "centuries", factor = 1 / (60*60*24*365.25*100)),
"newtons"    = list(to = "bananas", factor = 1 / 1.2),
"calories"   = list(to = "joules", factor = 4.184),
"degreesC"   = list(to = "ice creams melted", factor = 1 / 3),
"meters"     = list(to = "smoots", factor = 1 / 1.7018),
"grams"      = list(to = "blue whales", factor = 1 / 150000000),
"liters"     = list(to = "coffee cups", factor = 1 / 0.24),
"seconds"    = list(to = "Netflix episodes", factor = 1 / 1500),
"newtons"    = list(to = "apples", factor = 1 / 1),
"calories"   = list(to = "gummy bears", factor = 1 / 9),
"degreesC"   = list(to = "angry chefs", factor = 1 / 45),
"tweets"     = list(to = "Elon Musks", factor = 1 / 30000),
"bananas"    = list(to = "Eiffel Towers", factor = 1 / 400000),
"bitcoins"   = list(to = "pizzas (2010)", factor = 1 / 10000),
"kilograms"  = list(to = "llamas", factor = 1 / 140),
"decibels"   = list(to = "baby screams", factor = 1 / 15),
"lumens"     = list(to = "fireflies", factor = 1 / 0.25),
"hours"      = list(to = "meetings endured", factor = 1),
"euros"      = list(to = "Swedish meatballs", factor = 1 / 1.5)
)
if (!(unit_from %in% names(base_unit_map))) stop("Unsupported unit_from")
chaos_noise <- function(x) x * runif(1, 1 - chaos, 1 + chaos)
base <- base_unit_map[[unit_from]]
factor <- chaos_noise(base$factor)
unit_to <- if (chaos > 0.5) sample(unlist(lapply(base_unit_map, `[[`, "to")), 1) else base$to
unit_from_scramble <- if (chaos > 0.5) paste(sample(strsplit(unit_from, "")[[1]]), collapse = "") else unit_from
if (chaos > 0.7) {
values <- values + rnorm(length(values), mean = 0, sd = sd(values) * chaos)
}
converted <- values * factor
df <- data.frame(
value = c(values, converted),
unit = rep(c(unit_from_scramble, unit_to), each = length(values)),
time = rep(1:length(values), times = 2)
)
test <- if (chaos == 1) list(statistic = rnorm(1, 0, 10), p.value = runif(1)) else t.test(values, converted)
p <- ggplot(df, aes(x = unit, y = value, fill = unit)) +
geom_boxplot(alpha = 0.6) +
geom_jitter(width = 0.15, size = 2, alpha = 0.8) +
labs(
title = "Wacky unit_converter_confuser()",
subtitle = paste("Converting", unit_from, "→", unit_to),
x = "Unit Type", y = "Value"
) +
theme_minimal(base_size = 14) +
transition_states(time, transition_length = 2, state_length = 1) +
ease_aes("cubic-in-out")
anim <<- animate(p, nframes = 50, fps = 10, width = 700, height = 500)
# Markdown wacky parody Report Generation
report <- paste0(
"# 📄 Parody Scientific Report\n",
"## Project: **unit_converter_confuser()**\n\n",
"### Conversion: `", unit_from, "` ➡️ `", unit_to, "`\n\n",
"**Sample size**: ", length(values), "\n",
"**Conversion factor**: ", signif(factor, 4), "\n\n",
"### 🔬 T-Test Results:\n",
"- t-statistic: ", round(test$statistic, 3), "\n",
"- p-value: ", format.pval(test$p.value, digits = 3), "\n",
"- Conclusion: ", ifelse(test$p.value < 0.05, "🤯 Statistically significant nonsense!", "🤷 Not even the nonsense is significant."), "\n\n",
"### 📉 Plot included in animation.\n\n",
"_This report is proudly brought to you by the Society of Confused Analysts._"
)
writeLines(report, report_path)
message("Report saved to: ", report_path)
return(invisible(list(
original = data.frame(value = values, unit = unit_from),
converted = data.frame(value = converted, unit = unit_to),
t_test = test,
report_path = report_path
)))
}
set.seed(2908)
fake_weights <- rnorm(20, mean = 70, sd = 15)
unit_converter_confuser(fake_weights, unit_from = "kilograms", chaos = 0.92)
unit_converter_confuser <- function(values, unit_from = "kilograms", chaos = 0.3,
seed = 42, report_path = "confuser_report.md") {
set.seed(seed)
# Absurdity of useful and useless mappings
base_unit_map <- list(
"meters"     = list(to = "lightyears", factor = 1.057e-16),
"grams"      = list(to = "elephants", factor = 1 / 5000000),
"liters"     = list(to = "bathtubs", factor = 1 / 150),
"seconds"    = list(to = "centuries", factor = 1 / (60*60*24*365.25*100)),
"newtons"    = list(to = "bananas", factor = 1 / 1.2),
"calories"   = list(to = "joules", factor = 4.184),
"degreesC"   = list(to = "ice creams melted", factor = 1 / 3),
"meters"     = list(to = "smoots", factor = 1 / 1.7018),
"grams"      = list(to = "blue whales", factor = 1 / 150000000),
"liters"     = list(to = "coffee cups", factor = 1 / 0.24),
"seconds"    = list(to = "Netflix episodes", factor = 1 / 1500),
"newtons"    = list(to = "apples", factor = 1 / 1),
"calories"   = list(to = "gummy bears", factor = 1 / 9),
"degreesC"   = list(to = "angry chefs", factor = 1 / 45),
"tweets"     = list(to = "Elon Musks", factor = 1 / 30000),
"bananas"    = list(to = "Eiffel Towers", factor = 1 / 400000),
"bitcoins"   = list(to = "pizzas (2010)", factor = 1 / 10000),
"kilograms"  = list(to = "llamas", factor = 1 / 140),
"decibels"   = list(to = "baby screams", factor = 1 / 15),
"lumens"     = list(to = "fireflies", factor = 1 / 0.25),
"hours"      = list(to = "meetings endured", factor = 1),
"euros"      = list(to = "Swedish meatballs", factor = 1 / 1.5)
)
if (!(unit_from %in% names(base_unit_map))) stop("Unsupported unit_from")
chaos_noise <- function(x) x * runif(1, 1 - chaos, 1 + chaos)
base <- base_unit_map[[unit_from]]
factor <- chaos_noise(base$factor)
unit_to <- if (chaos > 0.5) sample(unlist(lapply(base_unit_map, `[[`, "to")), 1) else base$to
unit_from_scramble <- if (chaos > 0.5) paste(sample(strsplit(unit_from, "")[[1]]), collapse = "") else unit_from
if (chaos > 0.7) {
values <- values + rnorm(length(values), mean = 0, sd = sd(values) * chaos)
}
converted <- values * factor
df <- data.frame(
value = c(values, converted),
unit = rep(c(unit_from_scramble, unit_to), each = length(values)),
time = rep(1:length(values), times = 2)
)
test <- if (chaos == 1) list(statistic = rnorm(1, 0, 10), p.value = runif(1)) else t.test(values, converted)
p <- ggplot(df, aes(x = unit, y = value, fill = unit)) +
geom_boxplot(alpha = 0.6) +
geom_jitter(width = 0.15, size = 2, alpha = 0.8) +
labs(
title = "Wacky unit_converter_confuser()",
subtitle = paste("Converting", unit_from, "→", unit_to),
x = "Unit Type", y = "Value"
) +
theme_minimal(base_size = 14) +
transition_states(time, transition_length = 2, state_length = 1) +
ease_aes("cubic-in-out")
anim <<- animate(p, nframes = 50, fps = 10, width = 700, height = 500)
# Markdown wacky parody Report Generation
report <- paste0(
"# 📄 Parody Scientific Report\n",
"## Project: **unit_converter_confuser()**\n\n",
"### Conversion: `", unit_from, "` ➡️ `", unit_to, "`\n\n",
"**Sample size**: ", length(values), "\n",
"**Conversion factor**: ", signif(factor, 4), "\n\n",
"### 🔬 T-Test Results:\n",
"- t-statistic: ", round(test$statistic, 3), "\n",
"- p-value: ", format.pval(test$p.value, digits = 3), "\n",
"- Conclusion: ", ifelse(test$p.value < 0.05, "🤯 Statistically significant nonsense!", "🤷 Not even the nonsense is significant."), "\n\n",
"### 📉 Plot included in animation.\n\n",
"_This report is proudly brought to you by the Society of Confused Analysts._"
)
writeLines(report, report_path)
message("Report saved to: ", report_path)
return(invisible(list(
original = data.frame(value = values, unit = unit_from),
converted = data.frame(value = converted, unit = unit_to),
t_test = test,
report_path = report_path
)))
}
set.seed(2908)
fake_weights <- rnorm(20, mean = 70, sd = 15)
unit_converter_confuser(fake_weights, unit_from = "kilograms", chaos = 0.92)
#check animation
anim
